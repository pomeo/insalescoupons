{"version":3,"sources":["addons/upload.js"],"names":["addon","component","jQuery","UIkit","define","amd","$","UI","xhrupload","files","settings","upload","formData","FormData","xhr","XMLHttpRequest","before","f","i","append","param","p","params","addEventListener","e","percent","loaded","total","progress","loadstart","load","loadend","error","abort","open","method","action","onreadystatechange","readystatechange","readyState","response","responseText","type","parseJSON","complete","beforeSend","send","support","ajaxupload","this","extend","defaults","length","allow","file","matchName","name","alert","notallowed","single","count","uploaded","beforeAll","filelimit","allcomplete","pattern","path","parsedPattern","replace","match","RegExp","init","$this","on","element","options","dragoverClass","hasdragCls","dataTransfer","stopPropagation","preventDefault","removeClass","trigger","addClass","supportFileAPI","fi","document","createElement","supportAjaxUploadProgressEvents","supportFormData","window","event","props","push","Utils"],"mappings":"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","file":"addons/upload.js","sourcesContent":["/*! UIkit 2.9.0 | http://www.getuikit.com | (c) 2014 YOOtheme | MIT License */\n\n(function(addon) {\n\n    var component;\n\n    if (jQuery && jQuery.UIkit) {\n        component = addon(jQuery, jQuery.UIkit);\n    }\n\n    if (typeof define == \"function\" && define.amd) {\n        define(\"uikit-upload\", [\"uikit\"], function(){\n            return component || addon(jQuery, jQuery.UIkit);\n        });\n    }\n\n})(function($, UI){\n\n    UI.component('uploadSelect', {\n\n\n        init: function() {\n\n            var $this = this;\n\n            this.on(\"change\", function() {\n                xhrupload($this.element[0].files, $this.options);\n            });\n        }\n    });\n\n    UI.component('uploadDrop', {\n\n        defaults: {\n            'dragoverClass': 'uk-dragover'\n        },\n\n        init: function() {\n\n            var $this = this, hasdragCls = false;\n\n            this.on(\"drop\", function(e){\n\n                if (e.dataTransfer && e.dataTransfer.files) {\n\n                    e.stopPropagation();\n                    e.preventDefault();\n\n                    $this.element.removeClass($this.options.dragoverClass);\n                    $this.element.trigger('uk.dropped', [e.dataTransfer.files]);\n\n                    xhrupload(e.dataTransfer.files, $this.options);\n                }\n\n            }).on(\"dragenter\", function(e){\n                e.stopPropagation();\n                e.preventDefault();\n            }).on(\"dragover\", function(e){\n                e.stopPropagation();\n                e.preventDefault();\n\n                if (!hasdragCls) {\n                    $this.element.addClass($this.options.dragoverClass);\n                    hasdragCls = true;\n                }\n            }).on(\"dragleave\", function(e){\n                e.stopPropagation();\n                e.preventDefault();\n                $this.element.removeClass($this.options.dragoverClass);\n                hasdragCls = false;\n            });\n        }\n    });\n\n\n    UI.support.ajaxupload = (function() {\n\n        function supportFileAPI() {\n            var fi = document.createElement('INPUT'); fi.type = 'file'; return 'files' in fi;\n        }\n\n        function supportAjaxUploadProgressEvents() {\n            var xhr = new XMLHttpRequest(); return !! (xhr && ('upload' in xhr) && ('onprogress' in xhr.upload));\n        }\n\n        function supportFormData() {\n            return !! window.FormData;\n        }\n\n        return supportFileAPI() && supportAjaxUploadProgressEvents() && supportFormData();\n    })();\n\n    if (UI.support.ajaxupload){\n        $.event.props.push(\"dataTransfer\");\n    }\n\n    function xhrupload(files, settings) {\n\n        if (!UI.support.ajaxupload){\n            return this;\n        }\n\n        settings = $.extend({}, xhrupload.defaults, settings);\n\n        if (!files.length){\n            return;\n        }\n\n        if (settings.allow !== '*.*') {\n\n            for(var i=0,file;file=files[i];i++) {\n\n                if(!matchName(settings.allow, file.name)) {\n\n                    if(typeof(settings.notallowed) == 'string') {\n                       alert(settings.notallowed);\n                    } else {\n                       settings.notallowed(file, settings);\n                    }\n                    return;\n                }\n            }\n        }\n\n        var complete = settings.complete;\n\n        if (settings.single){\n\n            var count    = files.length,\n                uploaded = 0,\n                allow    = true;\n\n                settings.beforeAll(files);\n\n                settings.complete = function(response, xhr){\n\n                    uploaded = uploaded + 1;\n\n                    complete(response, xhr);\n\n                    if (settings.filelimit && uploaded >= settings.filelimit){\n                        allow = false;\n                    }\n\n                    if (allow && uploaded<count){\n                        upload([files[uploaded]], settings);\n                    } else {\n                        settings.allcomplete(response, xhr);\n                    }\n                };\n\n                upload([files[0]], settings);\n\n        } else {\n\n            settings.complete = function(response, xhr){\n                complete(response, xhr);\n                settings.allcomplete(response, xhr);\n            };\n\n            upload(files, settings);\n        }\n\n        function upload(files, settings){\n\n            // upload all at once\n            var formData = new FormData(), xhr = new XMLHttpRequest();\n\n            if (settings.before(settings, files)===false) return;\n\n            for (var i = 0, f; f = files[i]; i++) { formData.append(settings.param, f); }\n            for (var p in settings.params) { formData.append(p, settings.params[p]); }\n\n            // Add any event handlers here...\n            xhr.upload.addEventListener(\"progress\", function(e){\n                var percent = (e.loaded / e.total)*100;\n                settings.progress(percent, e);\n            }, false);\n\n            xhr.addEventListener(\"loadstart\", function(e){ settings.loadstart(e); }, false);\n            xhr.addEventListener(\"load\",      function(e){ settings.load(e);      }, false);\n            xhr.addEventListener(\"loadend\",   function(e){ settings.loadend(e);   }, false);\n            xhr.addEventListener(\"error\",     function(e){ settings.error(e);     }, false);\n            xhr.addEventListener(\"abort\",     function(e){ settings.abort(e);     }, false);\n\n            xhr.open(settings.method, settings.action, true);\n\n            xhr.onreadystatechange = function() {\n\n                settings.readystatechange(xhr);\n\n                if (xhr.readyState==4){\n\n                    var response = xhr.responseText;\n\n                    if (settings.type==\"json\") {\n                        try {\n                            response = $.parseJSON(response);\n                        } catch(e) {\n                            response = false;\n                        }\n                    }\n\n                    settings.complete(response, xhr);\n                }\n            };\n            settings.beforeSend(xhr);\n            xhr.send(formData);\n        }\n    }\n\n    xhrupload.defaults = {\n        'action': '',\n        'single': true,\n        'method': 'POST',\n        'param' : 'files[]',\n        'params': {},\n        'allow' : '*.*',\n        'type'  : 'text',\n        'filelimit': false,\n\n        // events\n        'before'          : function(o){},\n        'beforeSend'      : function(xhr){},\n        'beforeAll'       : function(){},\n        'loadstart'       : function(){},\n        'load'            : function(){},\n        'loadend'         : function(){},\n        'error'           : function(){},\n        'abort'           : function(){},\n        'progress'        : function(){},\n        'complete'        : function(){},\n        'allcomplete'     : function(){},\n        'readystatechange': function(){},\n        'notallowed'      : function(file, settings){ alert('Only the following file types are allowed: '+settings.allow); }\n    };\n\n    function matchName(pattern, path) {\n\n        var parsedPattern = '^' + pattern.replace(/\\//g, '\\\\/').\n            replace(/\\*\\*/g, '(\\\\/[^\\\\/]+)*').\n            replace(/\\*/g, '[^\\\\/]+').\n            replace(/((?!\\\\))\\?/g, '$1.') + '$';\n\n        parsedPattern = '^' + parsedPattern + '$';\n\n        return (path.match(new RegExp(parsedPattern, 'i')) !== null);\n    }\n\n    UI.Utils.xhrupload = xhrupload;\n\n    return xhrupload;\n});\n"],"sourceRoot":"/source/"}