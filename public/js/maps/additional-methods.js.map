{"version":3,"sources":["additional-methods.js"],"names":["factory","define","amd","jQuery","$","stripHtml","value","replace","validator","addMethod","element","params","this","optional","match","length","format","valueStripped","regex","param","i","file","typeParam","optionalValue","attr","files","type","RegExp","test","pos","factor","digit","account","sum","len","substring","methods","bankaccountNL","call","giroaccountNL","controlDigit","count","tmp","secondDigit","num","toUpperCase","parseInt","charAt","toString","String","fromCharCode","validTypes","mastercard","visa","amex","dinersclub","enroute","discover","jcb","unknown","all","isParamString","symbol","soft","adata","gg","mm","aaaa","xdata","check","re","split","Date","getUTCFullYear","getUTCMonth","getUTCDate","countrycode","ibancheck","cChar","bbanpattern","bbancountrypatterns","ibanregexp","p","iban","ibancheckdigits","leadingZeroes","cRest","cOperator","AL","AD","AT","AZ","BE","BH","BA","BR","BG","CR","HR","CY","CZ","DK","DO","EE","FO","FI","FR","GE","DE","GI","GR","GL","GT","HU","IS","IE","IL","IT","KZ","KW","LV","LB","LI","LT","LU","MK","MT","MR","MU","MC","MD","ME","NL","NO","PK","PS","PL","PT","RO","SM","SA","RS","SK","SI","ES","SE","CH","TN","TR","AE","GB","VG","indexOf","phone_number","options","$fields","form","$fieldsFirst","eq","data","extend","isValid","filter","elementValue","each","numberFilled","isDefault","caseSensitive","includeTerritories","includeMilitary","text","messages","url","v","n","d","f","cd","cdv","LL","VL","FL","rs","slice","isNaN"],"mappings":"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","file":"additional-methods.js","sourcesContent":["/*!\n * jQuery Validation Plugin v1.13.0\n *\n * http://jqueryvalidation.org/\n *\n * Copyright (c) 2014 Jörn Zaefferer\n * Released under the MIT license\n */\n(function( factory ) {\n\tif ( typeof define === \"function\" && define.amd ) {\n\t\tdefine( [\"jquery\", \"./jquery.validate\"], factory );\n\t} else {\n\t\tfactory( jQuery );\n\t}\n}(function( $ ) {\n\n(function() {\n\n\tfunction stripHtml(value) {\n\t\t// remove html tags and space chars\n\t\treturn value.replace(/<.[^<>]*?>/g, \" \").replace(/&nbsp;|&#160;/gi, \" \")\n\t\t// remove punctuation\n\t\t.replace(/[.(),;:!?%#$'\\\"_+=\\/\\-“”’]*/g, \"\");\n\t}\n\n\t$.validator.addMethod(\"maxWords\", function(value, element, params) {\n\t\treturn this.optional(element) || stripHtml(value).match(/\\b\\w+\\b/g).length <= params;\n\t}, $.validator.format(\"Please enter {0} words or less.\"));\n\n\t$.validator.addMethod(\"minWords\", function(value, element, params) {\n\t\treturn this.optional(element) || stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\n\t}, $.validator.format(\"Please enter at least {0} words.\"));\n\n\t$.validator.addMethod(\"rangeWords\", function(value, element, params) {\n\t\tvar valueStripped = stripHtml(value),\n\t\t\tregex = /\\b\\w+\\b/g;\n\t\treturn this.optional(element) || valueStripped.match(regex).length >= params[0] && valueStripped.match(regex).length <= params[1];\n\t}, $.validator.format(\"Please enter between {0} and {1} words.\"));\n\n}());\n\n// Accept a value from a file input based on a required mimetype\n$.validator.addMethod(\"accept\", function(value, element, param) {\n\t// Split mime on commas in case we have multiple types we can accept\n\tvar typeParam = typeof param === \"string\" ? param.replace(/\\s/g, \"\").replace(/,/g, \"|\") : \"image/*\",\n\toptionalValue = this.optional(element),\n\ti, file;\n\n\t// Element is optional\n\tif (optionalValue) {\n\t\treturn optionalValue;\n\t}\n\n\tif ($(element).attr(\"type\") === \"file\") {\n\t\t// If we are using a wildcard, make it regex friendly\n\t\ttypeParam = typeParam.replace(/\\*/g, \".*\");\n\n\t\t// Check if the element has a FileList before checking each file\n\t\tif (element.files && element.files.length) {\n\t\t\tfor (i = 0; i < element.files.length; i++) {\n\t\t\t\tfile = element.files[i];\n\n\t\t\t\t// Grab the mimetype from the loaded file, verify it matches\n\t\t\t\tif (!file.type.match(new RegExp( \".?(\" + typeParam + \")$\", \"i\"))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Either return true because we've validated each file, or because the\n\t// browser does not support element.files and the FileList feature\n\treturn true;\n}, $.validator.format(\"Please enter a value with a valid mimetype.\"));\n\n$.validator.addMethod(\"alphanumeric\", function(value, element) {\n\treturn this.optional(element) || /^\\w+$/i.test(value);\n}, \"Letters, numbers, and underscores only please\");\n\n/*\n * Dutch bank account numbers (not 'giro' numbers) have 9 digits\n * and pass the '11 check'.\n * We accept the notation with spaces, as that is common.\n * acceptable: 123456789 or 12 34 56 789\n */\n$.validator.addMethod(\"bankaccountNL\", function(value, element) {\n\tif (this.optional(element)) {\n\t\treturn true;\n\t}\n\tif (!(/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(value))) {\n\t\treturn false;\n\t}\n\t// now '11 check'\n\tvar account = value.replace(/ /g, \"\"), // remove spaces\n\t\tsum = 0,\n\t\tlen = account.length,\n\t\tpos, factor, digit;\n\tfor ( pos = 0; pos < len; pos++ ) {\n\t\tfactor = len - pos;\n\t\tdigit = account.substring(pos, pos + 1);\n\t\tsum = sum + factor * digit;\n\t}\n\treturn sum % 11 === 0;\n}, \"Please specify a valid bank account number\");\n\n$.validator.addMethod(\"bankorgiroaccountNL\", function(value, element) {\n\treturn this.optional(element) ||\n\t\t\t($.validator.methods.bankaccountNL.call(this, value, element)) ||\n\t\t\t($.validator.methods.giroaccountNL.call(this, value, element));\n}, \"Please specify a valid bank or giro account number\");\n\n/**\n * BIC is the business identifier code (ISO 9362). This BIC check is not a guarantee for authenticity.\n *\n * BIC pattern: BBBBCCLLbbb (8 or 11 characters long; bbb is optional)\n *\n * BIC definition in detail:\n * - First 4 characters - bank code (only letters)\n * - Next 2 characters - ISO 3166-1 alpha-2 country code (only letters)\n * - Next 2 characters - location code (letters and digits)\n *   a. shall not start with '0' or '1'\n *   b. second character must be a letter ('O' is not allowed) or one of the following digits ('0' for test (therefore not allowed), '1' for passive participant and '2' for active participant)\n * - Last 3 characters - branch code, optional (shall not start with 'X' except in case of 'XXX' for primary office) (letters and digits)\n */\n$.validator.addMethod(\"bic\", function(value, element) {\n    return this.optional( element ) || /^([A-Z]{6}[A-Z2-9][A-NP-Z1-2])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test( value );\n}, \"Please specify a valid BIC code\");\n\n/*\n * Código de identificación fiscal ( CIF ) is the tax identification code for Spanish legal entities\n * Further rules can be found in Spanish on http://es.wikipedia.org/wiki/C%C3%B3digo_de_identificaci%C3%B3n_fiscal\n */\n$.validator.addMethod( \"cifES\", function( value ) {\n\t\"use strict\";\n\n\tvar num = [],\n\t\tcontrolDigit, sum, i, count, tmp, secondDigit;\n\n\tvalue = value.toUpperCase();\n\n\t// Quick format test\n\tif ( !value.match( \"((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)\" ) ) {\n\t\treturn false;\n\t}\n\n\tfor ( i = 0; i < 9; i++ ) {\n\t\tnum[ i ] = parseInt( value.charAt( i ), 10 );\n\t}\n\n\t// Algorithm for checking CIF codes\n\tsum = num[ 2 ] + num[ 4 ] + num[ 6 ];\n\tfor ( count = 1; count < 8; count += 2 ) {\n\t\ttmp = ( 2 * num[ count ] ).toString();\n\t\tsecondDigit = tmp.charAt( 1 );\n\n\t\tsum += parseInt( tmp.charAt( 0 ), 10 ) + ( secondDigit === \"\" ? 0 : parseInt( secondDigit, 10 ) );\n\t}\n\n\t/* The first (position 1) is a letter following the following criteria:\n\t *\tA. Corporations\n\t *\tB. LLCs\n\t *\tC. General partnerships\n\t *\tD. Companies limited partnerships\n\t *\tE. Communities of goods\n\t *\tF. Cooperative Societies\n\t *\tG. Associations\n\t *\tH. Communities of homeowners in horizontal property regime\n\t *\tJ. Civil Societies\n\t *\tK. Old format\n\t *\tL. Old format\n\t *\tM. Old format\n\t *\tN. Nonresident entities\n\t *\tP. Local authorities\n\t *\tQ. Autonomous bodies, state or not, and the like, and congregations and religious institutions\n\t *\tR. Congregations and religious institutions (since 2008 ORDER EHA/451/2008)\n\t *\tS. Organs of State Administration and regions\n\t *\tV. Agrarian Transformation\n\t *\tW. Permanent establishments of non-resident in Spain\n\t */\n\tif ( /^[ABCDEFGHJNPQRSUVW]{1}/.test( value ) ) {\n\t\tsum += \"\";\n\t\tcontrolDigit = 10 - parseInt( sum.charAt( sum.length - 1 ), 10 );\n\t\tvalue += controlDigit;\n\t\treturn ( num[ 8 ].toString() === String.fromCharCode( 64 + controlDigit ) || num[ 8 ].toString() === value.charAt( value.length - 1 ) );\n\t}\n\n\treturn false;\n\n}, \"Please specify a valid CIF number.\" );\n\n/* NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator\n * Redistributed under the the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0\n * Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)\n */\n$.validator.addMethod(\"creditcardtypes\", function(value, element, param) {\n\tif (/[^0-9\\-]+/.test(value)) {\n\t\treturn false;\n\t}\n\n\tvalue = value.replace(/\\D/g, \"\");\n\n\tvar validTypes = 0x0000;\n\n\tif (param.mastercard) {\n\t\tvalidTypes |= 0x0001;\n\t}\n\tif (param.visa) {\n\t\tvalidTypes |= 0x0002;\n\t}\n\tif (param.amex) {\n\t\tvalidTypes |= 0x0004;\n\t}\n\tif (param.dinersclub) {\n\t\tvalidTypes |= 0x0008;\n\t}\n\tif (param.enroute) {\n\t\tvalidTypes |= 0x0010;\n\t}\n\tif (param.discover) {\n\t\tvalidTypes |= 0x0020;\n\t}\n\tif (param.jcb) {\n\t\tvalidTypes |= 0x0040;\n\t}\n\tif (param.unknown) {\n\t\tvalidTypes |= 0x0080;\n\t}\n\tif (param.all) {\n\t\tvalidTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\n\t}\n\tif (validTypes & 0x0001 && /^(5[12345])/.test(value)) { //mastercard\n\t\treturn value.length === 16;\n\t}\n\tif (validTypes & 0x0002 && /^(4)/.test(value)) { //visa\n\t\treturn value.length === 16;\n\t}\n\tif (validTypes & 0x0004 && /^(3[47])/.test(value)) { //amex\n\t\treturn value.length === 15;\n\t}\n\tif (validTypes & 0x0008 && /^(3(0[012345]|[68]))/.test(value)) { //dinersclub\n\t\treturn value.length === 14;\n\t}\n\tif (validTypes & 0x0010 && /^(2(014|149))/.test(value)) { //enroute\n\t\treturn value.length === 15;\n\t}\n\tif (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover\n\t\treturn value.length === 16;\n\t}\n\tif (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb\n\t\treturn value.length === 16;\n\t}\n\tif (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb\n\t\treturn value.length === 15;\n\t}\n\tif (validTypes & 0x0080) { //unknown\n\t\treturn true;\n\t}\n\treturn false;\n}, \"Please enter a valid credit card number.\");\n\n/**\n * Validates currencies with any given symbols by @jameslouiz\n * Symbols can be optional or required. Symbols required by default\n *\n * Usage examples:\n *  currency: [\"£\", false] - Use false for soft currency validation\n *  currency: [\"$\", false]\n *  currency: [\"RM\", false] - also works with text based symbols such as \"RM\" - Malaysia Ringgit etc\n *\n *  <input class=\"currencyInput\" name=\"currencyInput\">\n *\n * Soft symbol checking\n *  currencyInput: {\n *     currency: [\"$\", false]\n *  }\n *\n * Strict symbol checking (default)\n *  currencyInput: {\n *     currency: \"$\"\n *     //OR\n *     currency: [\"$\", true]\n *  }\n *\n * Multiple Symbols\n *  currencyInput: {\n *     currency: \"$,£,¢\"\n *  }\n */\n$.validator.addMethod(\"currency\", function(value, element, param) {\n    var isParamString = typeof param === \"string\",\n        symbol = isParamString ? param : param[0],\n        soft = isParamString ? true : param[1],\n        regex;\n\n    symbol = symbol.replace(/,/g, \"\");\n    symbol = soft ? symbol + \"]\" : symbol + \"]?\";\n    regex = \"^[\" + symbol + \"([1-9]{1}[0-9]{0,2}(\\\\,[0-9]{3})*(\\\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\\\.[0-9]{0,2})?|0(\\\\.[0-9]{0,2})?|(\\\\.[0-9]{1,2})?)$\";\n    regex = new RegExp(regex);\n    return this.optional(element) || regex.test(value);\n\n}, \"Please specify a valid currency\");\n\n$.validator.addMethod(\"dateFA\", function(value, element) {\n\treturn this.optional(element) || /^[1-4]\\d{3}\\/((0?[1-6]\\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\\/(30|([1-2][0-9])|(0?[1-9]))))$/.test(value);\n}, \"Please enter a correct date\");\n\n/**\n * Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.\n *\n * @example $.validator.methods.date(\"01/01/1900\")\n * @result true\n *\n * @example $.validator.methods.date(\"01/13/1990\")\n * @result false\n *\n * @example $.validator.methods.date(\"01.01.1900\")\n * @result false\n *\n * @example <input name=\"pippo\" class=\"{dateITA:true}\" />\n * @desc Declares an optional input element whose value must be a valid date.\n *\n * @name $.validator.methods.dateITA\n * @type Boolean\n * @cat Plugins/Validate/Methods\n */\n$.validator.addMethod(\"dateITA\", function(value, element) {\n\tvar check = false,\n\t\tre = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/,\n\t\tadata, gg, mm, aaaa, xdata;\n\tif ( re.test(value)) {\n\t\tadata = value.split(\"/\");\n\t\tgg = parseInt(adata[0], 10);\n\t\tmm = parseInt(adata[1], 10);\n\t\taaaa = parseInt(adata[2], 10);\n\t\txdata = new Date(aaaa, mm - 1, gg, 12, 0, 0, 0);\n\t\tif ( ( xdata.getUTCFullYear() === aaaa ) && ( xdata.getUTCMonth () === mm - 1 ) && ( xdata.getUTCDate() === gg ) ) {\n\t\t\tcheck = true;\n\t\t} else {\n\t\t\tcheck = false;\n\t\t}\n\t} else {\n\t\tcheck = false;\n\t}\n\treturn this.optional(element) || check;\n}, \"Please enter a correct date\");\n\n$.validator.addMethod(\"dateNL\", function(value, element) {\n\treturn this.optional(element) || /^(0?[1-9]|[12]\\d|3[01])[\\.\\/\\-](0?[1-9]|1[012])[\\.\\/\\-]([12]\\d)?(\\d\\d)$/.test(value);\n}, \"Please enter a correct date\");\n\n// Older \"accept\" file extension method. Old docs: http://docs.jquery.com/Plugins/Validation/Methods/accept\n$.validator.addMethod(\"extension\", function(value, element, param) {\n\tparam = typeof param === \"string\" ? param.replace(/,/g, \"|\") : \"png|jpe?g|gif\";\n\treturn this.optional(element) || value.match(new RegExp(\".(\" + param + \")$\", \"i\"));\n}, $.validator.format(\"Please enter a value with a valid extension.\"));\n\n/**\n * Dutch giro account numbers (not bank numbers) have max 7 digits\n */\n$.validator.addMethod(\"giroaccountNL\", function(value, element) {\n\treturn this.optional(element) || /^[0-9]{1,7}$/.test(value);\n}, \"Please specify a valid giro account number\");\n\n/**\n * IBAN is the international bank account number.\n * It has a country - specific format, that is checked here too\n */\n$.validator.addMethod(\"iban\", function(value, element) {\n\t// some quick simple tests to prevent needless work\n\tif (this.optional(element)) {\n\t\treturn true;\n\t}\n\n\t// remove spaces and to upper case\n\tvar iban = value.replace(/ /g, \"\").toUpperCase(),\n\t\tibancheckdigits = \"\",\n\t\tleadingZeroes = true,\n\t\tcRest = \"\",\n\t\tcOperator = \"\",\n\t\tcountrycode, ibancheck, charAt, cChar, bbanpattern, bbancountrypatterns, ibanregexp, i, p;\n\n\tif (!(/^([a-zA-Z0-9]{4} ){2,8}[a-zA-Z0-9]{1,4}|[a-zA-Z0-9]{12,34}$/.test(iban))) {\n\t\treturn false;\n\t}\n\n\t// check the country code and find the country specific format\n\tcountrycode = iban.substring(0, 2);\n\tbbancountrypatterns = {\n\t\t\"AL\": \"\\\\d{8}[\\\\dA-Z]{16}\",\n\t\t\"AD\": \"\\\\d{8}[\\\\dA-Z]{12}\",\n\t\t\"AT\": \"\\\\d{16}\",\n\t\t\"AZ\": \"[\\\\dA-Z]{4}\\\\d{20}\",\n\t\t\"BE\": \"\\\\d{12}\",\n\t\t\"BH\": \"[A-Z]{4}[\\\\dA-Z]{14}\",\n\t\t\"BA\": \"\\\\d{16}\",\n\t\t\"BR\": \"\\\\d{23}[A-Z][\\\\dA-Z]\",\n\t\t\"BG\": \"[A-Z]{4}\\\\d{6}[\\\\dA-Z]{8}\",\n\t\t\"CR\": \"\\\\d{17}\",\n\t\t\"HR\": \"\\\\d{17}\",\n\t\t\"CY\": \"\\\\d{8}[\\\\dA-Z]{16}\",\n\t\t\"CZ\": \"\\\\d{20}\",\n\t\t\"DK\": \"\\\\d{14}\",\n\t\t\"DO\": \"[A-Z]{4}\\\\d{20}\",\n\t\t\"EE\": \"\\\\d{16}\",\n\t\t\"FO\": \"\\\\d{14}\",\n\t\t\"FI\": \"\\\\d{14}\",\n\t\t\"FR\": \"\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}\",\n\t\t\"GE\": \"[\\\\dA-Z]{2}\\\\d{16}\",\n\t\t\"DE\": \"\\\\d{18}\",\n\t\t\"GI\": \"[A-Z]{4}[\\\\dA-Z]{15}\",\n\t\t\"GR\": \"\\\\d{7}[\\\\dA-Z]{16}\",\n\t\t\"GL\": \"\\\\d{14}\",\n\t\t\"GT\": \"[\\\\dA-Z]{4}[\\\\dA-Z]{20}\",\n\t\t\"HU\": \"\\\\d{24}\",\n\t\t\"IS\": \"\\\\d{22}\",\n\t\t\"IE\": \"[\\\\dA-Z]{4}\\\\d{14}\",\n\t\t\"IL\": \"\\\\d{19}\",\n\t\t\"IT\": \"[A-Z]\\\\d{10}[\\\\dA-Z]{12}\",\n\t\t\"KZ\": \"\\\\d{3}[\\\\dA-Z]{13}\",\n\t\t\"KW\": \"[A-Z]{4}[\\\\dA-Z]{22}\",\n\t\t\"LV\": \"[A-Z]{4}[\\\\dA-Z]{13}\",\n\t\t\"LB\": \"\\\\d{4}[\\\\dA-Z]{20}\",\n\t\t\"LI\": \"\\\\d{5}[\\\\dA-Z]{12}\",\n\t\t\"LT\": \"\\\\d{16}\",\n\t\t\"LU\": \"\\\\d{3}[\\\\dA-Z]{13}\",\n\t\t\"MK\": \"\\\\d{3}[\\\\dA-Z]{10}\\\\d{2}\",\n\t\t\"MT\": \"[A-Z]{4}\\\\d{5}[\\\\dA-Z]{18}\",\n\t\t\"MR\": \"\\\\d{23}\",\n\t\t\"MU\": \"[A-Z]{4}\\\\d{19}[A-Z]{3}\",\n\t\t\"MC\": \"\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}\",\n\t\t\"MD\": \"[\\\\dA-Z]{2}\\\\d{18}\",\n\t\t\"ME\": \"\\\\d{18}\",\n\t\t\"NL\": \"[A-Z]{4}\\\\d{10}\",\n\t\t\"NO\": \"\\\\d{11}\",\n\t\t\"PK\": \"[\\\\dA-Z]{4}\\\\d{16}\",\n\t\t\"PS\": \"[\\\\dA-Z]{4}\\\\d{21}\",\n\t\t\"PL\": \"\\\\d{24}\",\n\t\t\"PT\": \"\\\\d{21}\",\n\t\t\"RO\": \"[A-Z]{4}[\\\\dA-Z]{16}\",\n\t\t\"SM\": \"[A-Z]\\\\d{10}[\\\\dA-Z]{12}\",\n\t\t\"SA\": \"\\\\d{2}[\\\\dA-Z]{18}\",\n\t\t\"RS\": \"\\\\d{18}\",\n\t\t\"SK\": \"\\\\d{20}\",\n\t\t\"SI\": \"\\\\d{15}\",\n\t\t\"ES\": \"\\\\d{20}\",\n\t\t\"SE\": \"\\\\d{20}\",\n\t\t\"CH\": \"\\\\d{5}[\\\\dA-Z]{12}\",\n\t\t\"TN\": \"\\\\d{20}\",\n\t\t\"TR\": \"\\\\d{5}[\\\\dA-Z]{17}\",\n\t\t\"AE\": \"\\\\d{3}\\\\d{16}\",\n\t\t\"GB\": \"[A-Z]{4}\\\\d{14}\",\n\t\t\"VG\": \"[\\\\dA-Z]{4}\\\\d{16}\"\n\t};\n\n\tbbanpattern = bbancountrypatterns[countrycode];\n\t// As new countries will start using IBAN in the\n\t// future, we only check if the countrycode is known.\n\t// This prevents false negatives, while almost all\n\t// false positives introduced by this, will be caught\n\t// by the checksum validation below anyway.\n\t// Strict checking should return FALSE for unknown\n\t// countries.\n\tif (typeof bbanpattern !== \"undefined\") {\n\t\tibanregexp = new RegExp(\"^[A-Z]{2}\\\\d{2}\" + bbanpattern + \"$\", \"\");\n\t\tif (!(ibanregexp.test(iban))) {\n\t\t\treturn false; // invalid country specific format\n\t\t}\n\t}\n\n\t// now check the checksum, first convert to digits\n\tibancheck = iban.substring(4, iban.length) + iban.substring(0, 4);\n\tfor (i = 0; i < ibancheck.length; i++) {\n\t\tcharAt = ibancheck.charAt(i);\n\t\tif (charAt !== \"0\") {\n\t\t\tleadingZeroes = false;\n\t\t}\n\t\tif (!leadingZeroes) {\n\t\t\tibancheckdigits += \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".indexOf(charAt);\n\t\t}\n\t}\n\n\t// calculate the result of: ibancheckdigits % 97\n\tfor (p = 0; p < ibancheckdigits.length; p++) {\n\t\tcChar = ibancheckdigits.charAt(p);\n\t\tcOperator = \"\" + cRest + \"\" + cChar;\n\t\tcRest = cOperator % 97;\n\t}\n\treturn cRest === 1;\n}, \"Please specify a valid IBAN\");\n\n$.validator.addMethod(\"integer\", function(value, element) {\n\treturn this.optional(element) || /^-?\\d+$/.test(value);\n}, \"A positive or negative non-decimal number please\");\n\n$.validator.addMethod(\"ipv4\", function(value, element) {\n\treturn this.optional(element) || /^(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/i.test(value);\n}, \"Please enter a valid IP v4 address.\");\n\n$.validator.addMethod(\"ipv6\", function(value, element) {\n\treturn this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);\n}, \"Please enter a valid IP v6 address.\");\n\n$.validator.addMethod(\"lettersonly\", function(value, element) {\n\treturn this.optional(element) || /^[a-z]+$/i.test(value);\n}, \"Letters only please\");\n\n$.validator.addMethod(\"letterswithbasicpunc\", function(value, element) {\n\treturn this.optional(element) || /^[a-z\\-.,()'\"\\s]+$/i.test(value);\n}, \"Letters or punctuation only please\");\n\n$.validator.addMethod(\"mobileNL\", function(value, element) {\n\treturn this.optional(element) || /^((\\+|00(\\s|\\s?\\-\\s?)?)31(\\s|\\s?\\-\\s?)?(\\(0\\)[\\-\\s]?)?|0)6((\\s|\\s?\\-\\s?)?[0-9]){8}$/.test(value);\n}, \"Please specify a valid mobile number\");\n\n/* For UK phone functions, do the following server side processing:\n * Compare original input with this RegEx pattern:\n * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n * A number of very detailed GB telephone number RegEx patterns can also be found at:\n * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers\n */\n$.validator.addMethod(\"mobileUK\", function(phone_number, element) {\n\tphone_number = phone_number.replace(/\\(|\\)|\\s+|-/g, \"\");\n\treturn this.optional(element) || phone_number.length > 9 &&\n\t\tphone_number.match(/^(?:(?:(?:00\\s?|\\+)44\\s?|0)7(?:[1345789]\\d{2}|624)\\s?\\d{3}\\s?\\d{3})$/);\n}, \"Please specify a valid mobile number\");\n\n/*\n * The número de identidad de extranjero ( NIE )is a code used to identify the non-nationals in Spain\n */\n$.validator.addMethod( \"nieES\", function( value ) {\n\t\"use strict\";\n\n\tvalue = value.toUpperCase();\n\n\t// Basic format test\n\tif ( !value.match( \"((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)\" ) ) {\n\t\treturn false;\n\t}\n\n\t// Test NIE\n\t//T\n\tif ( /^[T]{1}/.test( value ) ) {\n\t\treturn ( value[ 8 ] === /^[T]{1}[A-Z0-9]{8}$/.test( value ) );\n\t}\n\n\t//XYZ\n\tif ( /^[XYZ]{1}/.test( value ) ) {\n\t\treturn (\n\t\t\tvalue[ 8 ] === \"TRWAGMYFPDXBNJZSQVHLCKE\".charAt(\n\t\t\t\tvalue.replace( \"X\", \"0\" )\n\t\t\t\t\t.replace( \"Y\", \"1\" )\n\t\t\t\t\t.replace( \"Z\", \"2\" )\n\t\t\t\t\t.substring( 0, 8 ) % 23\n\t\t\t)\n\t\t);\n\t}\n\n\treturn false;\n\n}, \"Please specify a valid NIE number.\" );\n\n/*\n * The Número de Identificación Fiscal ( NIF ) is the way tax identification used in Spain for individuals\n */\n$.validator.addMethod( \"nifES\", function( value ) {\n\t\"use strict\";\n\n\tvalue = value.toUpperCase();\n\n\t// Basic format test\n\tif ( !value.match(\"((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)\") ) {\n\t\treturn false;\n\t}\n\n\t// Test NIF\n\tif ( /^[0-9]{8}[A-Z]{1}$/.test( value ) ) {\n\t\treturn ( \"TRWAGMYFPDXBNJZSQVHLCKE\".charAt( value.substring( 8, 0 ) % 23 ) === value.charAt( 8 ) );\n\t}\n\t// Test specials NIF (starts with K, L or M)\n\tif ( /^[KLM]{1}/.test( value ) ) {\n\t\treturn ( value[ 8 ] === String.fromCharCode( 64 ) );\n\t}\n\n\treturn false;\n\n}, \"Please specify a valid NIF number.\" );\n\n$.validator.addMethod(\"nowhitespace\", function(value, element) {\n\treturn this.optional(element) || /^\\S+$/i.test(value);\n}, \"No white space please\");\n\n/**\n* Return true if the field value matches the given format RegExp\n*\n* @example $.validator.methods.pattern(\"AR1004\",element,/^AR\\d{4}$/)\n* @result true\n*\n* @example $.validator.methods.pattern(\"BR1004\",element,/^AR\\d{4}$/)\n* @result false\n*\n* @name $.validator.methods.pattern\n* @type Boolean\n* @cat Plugins/Validate/Methods\n*/\n$.validator.addMethod(\"pattern\", function(value, element, param) {\n\tif (this.optional(element)) {\n\t\treturn true;\n\t}\n\tif (typeof param === \"string\") {\n\t\tparam = new RegExp(param);\n\t}\n\treturn param.test(value);\n}, \"Invalid format.\");\n\n/**\n * Dutch phone numbers have 10 digits (or 11 and start with +31).\n */\n$.validator.addMethod(\"phoneNL\", function(value, element) {\n\treturn this.optional(element) || /^((\\+|00(\\s|\\s?\\-\\s?)?)31(\\s|\\s?\\-\\s?)?(\\(0\\)[\\-\\s]?)?|0)[1-9]((\\s|\\s?\\-\\s?)?[0-9]){8}$/.test(value);\n}, \"Please specify a valid phone number.\");\n\n/* For UK phone functions, do the following server side processing:\n * Compare original input with this RegEx pattern:\n * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n * A number of very detailed GB telephone number RegEx patterns can also be found at:\n * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers\n */\n$.validator.addMethod(\"phoneUK\", function(phone_number, element) {\n\tphone_number = phone_number.replace(/\\(|\\)|\\s+|-/g, \"\");\n\treturn this.optional(element) || phone_number.length > 9 &&\n\t\tphone_number.match(/^(?:(?:(?:00\\s?|\\+)44\\s?)|(?:\\(?0))(?:\\d{2}\\)?\\s?\\d{4}\\s?\\d{4}|\\d{3}\\)?\\s?\\d{3}\\s?\\d{3,4}|\\d{4}\\)?\\s?(?:\\d{5}|\\d{3}\\s?\\d{3})|\\d{5}\\)?\\s?\\d{4,5})$/);\n}, \"Please specify a valid phone number\");\n\n/**\n * matches US phone number format\n *\n * where the area code may not start with 1 and the prefix may not start with 1\n * allows '-' or ' ' as a separator and allows parens around area code\n * some people may want to put a '1' in front of their number\n *\n * 1(212)-999-2345 or\n * 212 999 2344 or\n * 212-999-0983\n *\n * but not\n * 111-123-5434\n * and not\n * 212 123 4567\n */\n$.validator.addMethod(\"phoneUS\", function(phone_number, element) {\n\tphone_number = phone_number.replace(/\\s+/g, \"\");\n\treturn this.optional(element) || phone_number.length > 9 &&\n\t\tphone_number.match(/^(\\+?1-?)?(\\([2-9]([02-9]\\d|1[02-9])\\)|[2-9]([02-9]\\d|1[02-9]))-?[2-9]([02-9]\\d|1[02-9])-?\\d{4}$/);\n}, \"Please specify a valid phone number\");\n\n/* For UK phone functions, do the following server side processing:\n * Compare original input with this RegEx pattern:\n * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n * A number of very detailed GB telephone number RegEx patterns can also be found at:\n * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers\n */\n//Matches UK landline + mobile, accepting only 01-3 for landline or 07 for mobile to exclude many premium numbers\n$.validator.addMethod(\"phonesUK\", function(phone_number, element) {\n\tphone_number = phone_number.replace(/\\(|\\)|\\s+|-/g, \"\");\n\treturn this.optional(element) || phone_number.length > 9 &&\n\t\tphone_number.match(/^(?:(?:(?:00\\s?|\\+)44\\s?|0)(?:1\\d{8,9}|[23]\\d{9}|7(?:[1345789]\\d{8}|624\\d{6})))$/);\n}, \"Please specify a valid uk phone number\");\n\n/**\n * Matches a valid Canadian Postal Code\n *\n * @example jQuery.validator.methods.postalCodeCA( \"H0H 0H0\", element )\n * @result true\n *\n * @example jQuery.validator.methods.postalCodeCA( \"H0H0H0\", element )\n * @result false\n *\n * @name jQuery.validator.methods.postalCodeCA\n * @type Boolean\n * @cat Plugins/Validate/Methods\n */\n$.validator.addMethod( \"postalCodeCA\", function( value, element ) {\n\treturn this.optional( element ) || /^[ABCEGHJKLMNPRSTVXY]\\d[A-Z] \\d[A-Z]\\d$/.test( value );\n}, \"Please specify a valid postal code\" );\n\n/* Matches Italian postcode (CAP) */\n$.validator.addMethod(\"postalcodeIT\", function(value, element) {\n\treturn this.optional(element) || /^\\d{5}$/.test(value);\n}, \"Please specify a valid postal code\");\n\n$.validator.addMethod(\"postalcodeNL\", function(value, element) {\n\treturn this.optional(element) || /^[1-9][0-9]{3}\\s?[a-zA-Z]{2}$/.test(value);\n}, \"Please specify a valid postal code\");\n\n// Matches UK postcode. Does not match to UK Channel Islands that have their own postcodes (non standard UK)\n$.validator.addMethod(\"postcodeUK\", function(value, element) {\n\treturn this.optional(element) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\\s?(0AA))$/i.test(value);\n}, \"Please specify a valid UK postcode\");\n\n/*\n * Lets you say \"at least X inputs that match selector Y must be filled.\"\n *\n * The end result is that neither of these inputs:\n *\n *\t<input class=\"productinfo\" name=\"partnumber\">\n *\t<input class=\"productinfo\" name=\"description\">\n *\n *\t...will validate unless at least one of them is filled.\n *\n * partnumber:\t{require_from_group: [1,\".productinfo\"]},\n * description: {require_from_group: [1,\".productinfo\"]}\n *\n * options[0]: number of fields that must be filled in the group\n * options[1]: CSS selector that defines the group of conditionally required fields\n */\n$.validator.addMethod(\"require_from_group\", function(value, element, options) {\n\tvar $fields = $(options[1], element.form),\n\t\t$fieldsFirst = $fields.eq(0),\n\t\tvalidator = $fieldsFirst.data(\"valid_req_grp\") ? $fieldsFirst.data(\"valid_req_grp\") : $.extend({}, this),\n\t\tisValid = $fields.filter(function() {\n\t\t\treturn validator.elementValue(this);\n\t\t}).length >= options[0];\n\n\t// Store the cloned validator for future validation\n\t$fieldsFirst.data(\"valid_req_grp\", validator);\n\n\t// If element isn't being validated, run each require_from_group field's validation rules\n\tif (!$(element).data(\"being_validated\")) {\n\t\t$fields.data(\"being_validated\", true);\n\t\t$fields.each(function() {\n\t\t\tvalidator.element(this);\n\t\t});\n\t\t$fields.data(\"being_validated\", false);\n\t}\n\treturn isValid;\n}, $.validator.format(\"Please fill at least {0} of these fields.\"));\n\n/*\n * Lets you say \"either at least X inputs that match selector Y must be filled,\n * OR they must all be skipped (left blank).\"\n *\n * The end result, is that none of these inputs:\n *\n *\t<input class=\"productinfo\" name=\"partnumber\">\n *\t<input class=\"productinfo\" name=\"description\">\n *\t<input class=\"productinfo\" name=\"color\">\n *\n *\t...will validate unless either at least two of them are filled,\n *\tOR none of them are.\n *\n * partnumber:\t{skip_or_fill_minimum: [2,\".productinfo\"]},\n * description: {skip_or_fill_minimum: [2,\".productinfo\"]},\n * color:\t\t{skip_or_fill_minimum: [2,\".productinfo\"]}\n *\n * options[0]: number of fields that must be filled in the group\n * options[1]: CSS selector that defines the group of conditionally required fields\n *\n */\n$.validator.addMethod(\"skip_or_fill_minimum\", function(value, element, options) {\n\tvar $fields = $(options[1], element.form),\n\t\t$fieldsFirst = $fields.eq(0),\n\t\tvalidator = $fieldsFirst.data(\"valid_skip\") ? $fieldsFirst.data(\"valid_skip\") : $.extend({}, this),\n\t\tnumberFilled = $fields.filter(function() {\n\t\t\treturn validator.elementValue(this);\n\t\t}).length,\n\t\tisValid = numberFilled === 0 || numberFilled >= options[0];\n\n\t// Store the cloned validator for future validation\n\t$fieldsFirst.data(\"valid_skip\", validator);\n\n\t// If element isn't being validated, run each skip_or_fill_minimum field's validation rules\n\tif (!$(element).data(\"being_validated\")) {\n\t\t$fields.data(\"being_validated\", true);\n\t\t$fields.each(function() {\n\t\t\tvalidator.element(this);\n\t\t});\n\t\t$fields.data(\"being_validated\", false);\n\t}\n\treturn isValid;\n}, $.validator.format(\"Please either skip these fields or fill at least {0} of them.\"));\n\n/* Validates US States and/or Territories by @jdforsythe\n * Can be case insensitive or require capitalization - default is case insensitive\n * Can include US Territories or not - default does not\n * Can include US Military postal abbreviations (AA, AE, AP) - default does not\n *\n * Note: \"States\" always includes DC (District of Colombia)\n *\n * Usage examples:\n *\n *  This is the default - case insensitive, no territories, no military zones\n *  stateInput: {\n *     caseSensitive: false,\n *     includeTerritories: false,\n *     includeMilitary: false\n *  }\n *\n *  Only allow capital letters, no territories, no military zones\n *  stateInput: {\n *     caseSensitive: false\n *  }\n *\n *  Case insensitive, include territories but not military zones\n *  stateInput: {\n *     includeTerritories: true\n *  }\n *\n *  Only allow capital letters, include territories and military zones\n *  stateInput: {\n *     caseSensitive: true,\n *     includeTerritories: true,\n *     includeMilitary: true\n *  }\n *\n *\n *\n */\n\njQuery.validator.addMethod(\"stateUS\", function(value, element, options) {\n\tvar isDefault = typeof options === \"undefined\",\n\t\tcaseSensitive = ( isDefault || typeof options.caseSensitive === \"undefined\" ) ? false : options.caseSensitive,\n\t\tincludeTerritories = ( isDefault || typeof options.includeTerritories === \"undefined\" ) ? false : options.includeTerritories,\n\t\tincludeMilitary = ( isDefault || typeof options.includeMilitary === \"undefined\" ) ? false : options.includeMilitary,\n\t\tregex;\n\n\tif (!includeTerritories && !includeMilitary) {\n\t\tregex = \"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";\n\t} else if (includeTerritories && includeMilitary) {\n\t\tregex = \"^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\";\n\t} else if (includeTerritories) {\n\t\tregex = \"^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\";\n\t} else {\n\t\tregex = \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";\n\t}\n\n\tregex = caseSensitive ? new RegExp(regex) : new RegExp(regex, \"i\");\n\treturn this.optional(element) || regex.test(value);\n},\n\"Please specify a valid state\");\n\n// TODO check if value starts with <, otherwise don't try stripping anything\n$.validator.addMethod(\"strippedminlength\", function(value, element, param) {\n\treturn $(value).text().length >= param;\n}, $.validator.format(\"Please enter at least {0} characters\"));\n\n$.validator.addMethod(\"time\", function(value, element) {\n\treturn this.optional(element) || /^([01]\\d|2[0-3])(:[0-5]\\d){1,2}$/.test(value);\n}, \"Please enter a valid time, between 00:00 and 23:59\");\n\n$.validator.addMethod(\"time12h\", function(value, element) {\n\treturn this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\\d){1,2}(\\ ?[AP]M))$/i.test(value);\n}, \"Please enter a valid time in 12-hour am/pm format\");\n\n// same as url, but TLD is optional\n$.validator.addMethod(\"url2\", function(value, element) {\n\treturn this.optional(element) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\n}, $.validator.messages.url);\n\n/**\n * Return true, if the value is a valid vehicle identification number (VIN).\n *\n * Works with all kind of text inputs.\n *\n * @example <input type=\"text\" size=\"20\" name=\"VehicleID\" class=\"{required:true,vinUS:true}\" />\n * @desc Declares a required input element whose value must be a valid vehicle identification number.\n *\n * @name $.validator.methods.vinUS\n * @type Boolean\n * @cat Plugins/Validate/Methods\n */\n$.validator.addMethod(\"vinUS\", function(v) {\n\tif (v.length !== 17) {\n\t\treturn false;\n\t}\n\n\tvar LL = [ \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" ],\n\t\tVL = [ 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9 ],\n\t\tFL = [ 8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2 ],\n\t\trs = 0,\n\t\ti, n, d, f, cd, cdv;\n\n\tfor (i = 0; i < 17; i++) {\n\t\tf = FL[i];\n\t\td = v.slice(i, i + 1);\n\t\tif (i === 8) {\n\t\t\tcdv = d;\n\t\t}\n\t\tif (!isNaN(d)) {\n\t\t\td *= f;\n\t\t} else {\n\t\t\tfor (n = 0; n < LL.length; n++) {\n\t\t\t\tif (d.toUpperCase() === LL[n]) {\n\t\t\t\t\td = VL[n];\n\t\t\t\t\td *= f;\n\t\t\t\t\tif (isNaN(cdv) && n === 8) {\n\t\t\t\t\t\tcdv = LL[n];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trs += d;\n\t}\n\tcd = rs % 11;\n\tif (cd === 10) {\n\t\tcd = \"X\";\n\t}\n\tif (cd === cdv) {\n\t\treturn true;\n\t}\n\treturn false;\n}, \"The specified vehicle identification number (VIN) is invalid.\");\n\n$.validator.addMethod(\"zipcodeUS\", function(value, element) {\n\treturn this.optional(element) || /^\\d{5}(-\\d{4})?$/.test(value);\n}, \"The specified US ZIP Code is invalid\");\n\n$.validator.addMethod(\"ziprange\", function(value, element) {\n\treturn this.optional(element) || /^90[2-5]\\d\\{2\\}-\\d{4}$/.test(value);\n}, \"Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx\");\n\n}));"],"sourceRoot":"/source/"}